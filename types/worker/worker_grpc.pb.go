// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: protos/worker.proto

package worker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerClient interface {
	LifeCircle(ctx context.Context, opts ...grpc.CallOption) (Worker_LifeCircleClient, error)
	StatusSync(ctx context.Context, opts ...grpc.CallOption) (Worker_StatusSyncClient, error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) LifeCircle(ctx context.Context, opts ...grpc.CallOption) (Worker_LifeCircleClient, error) {
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[0], "/worker.Worker/LifeCircle", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerLifeCircleClient{stream}
	return x, nil
}

type Worker_LifeCircleClient interface {
	Send(*LifeCircleReq) error
	Recv() (*LifeCircleResp, error)
	grpc.ClientStream
}

type workerLifeCircleClient struct {
	grpc.ClientStream
}

func (x *workerLifeCircleClient) Send(m *LifeCircleReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workerLifeCircleClient) Recv() (*LifeCircleResp, error) {
	m := new(LifeCircleResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) StatusSync(ctx context.Context, opts ...grpc.CallOption) (Worker_StatusSyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[1], "/worker.Worker/StatusSync", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerStatusSyncClient{stream}
	return x, nil
}

type Worker_StatusSyncClient interface {
	Send(*StatusSyncReq) error
	Recv() (*StatusSyncResp, error)
	grpc.ClientStream
}

type workerStatusSyncClient struct {
	grpc.ClientStream
}

func (x *workerStatusSyncClient) Send(m *StatusSyncReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workerStatusSyncClient) Recv() (*StatusSyncResp, error) {
	m := new(StatusSyncResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WorkerServer is the server API for Worker service.
// All implementations must embed UnimplementedWorkerServer
// for forward compatibility
type WorkerServer interface {
	LifeCircle(Worker_LifeCircleServer) error
	StatusSync(Worker_StatusSyncServer) error
	mustEmbedUnimplementedWorkerServer()
}

// UnimplementedWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (UnimplementedWorkerServer) LifeCircle(Worker_LifeCircleServer) error {
	return status.Errorf(codes.Unimplemented, "method LifeCircle not implemented")
}
func (UnimplementedWorkerServer) StatusSync(Worker_StatusSyncServer) error {
	return status.Errorf(codes.Unimplemented, "method StatusSync not implemented")
}
func (UnimplementedWorkerServer) mustEmbedUnimplementedWorkerServer() {}

// UnsafeWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServer will
// result in compilation errors.
type UnsafeWorkerServer interface {
	mustEmbedUnimplementedWorkerServer()
}

func RegisterWorkerServer(s grpc.ServiceRegistrar, srv WorkerServer) {
	s.RegisterService(&Worker_ServiceDesc, srv)
}

func _Worker_LifeCircle_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkerServer).LifeCircle(&workerLifeCircleServer{stream})
}

type Worker_LifeCircleServer interface {
	Send(*LifeCircleResp) error
	Recv() (*LifeCircleReq, error)
	grpc.ServerStream
}

type workerLifeCircleServer struct {
	grpc.ServerStream
}

func (x *workerLifeCircleServer) Send(m *LifeCircleResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workerLifeCircleServer) Recv() (*LifeCircleReq, error) {
	m := new(LifeCircleReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Worker_StatusSync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkerServer).StatusSync(&workerStatusSyncServer{stream})
}

type Worker_StatusSyncServer interface {
	Send(*StatusSyncResp) error
	Recv() (*StatusSyncReq, error)
	grpc.ServerStream
}

type workerStatusSyncServer struct {
	grpc.ServerStream
}

func (x *workerStatusSyncServer) Send(m *StatusSyncResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workerStatusSyncServer) Recv() (*StatusSyncReq, error) {
	m := new(StatusSyncReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Worker_ServiceDesc is the grpc.ServiceDesc for Worker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Worker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "worker.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LifeCircle",
			Handler:       _Worker_LifeCircle_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StatusSync",
			Handler:       _Worker_StatusSync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/worker.proto",
}
