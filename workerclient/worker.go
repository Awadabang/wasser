// Code generated by goctl. DO NOT EDIT!
// Source: worker.proto

package workerclient

import (
	"context"

	"github.com/Awadabang/wasser/types/worker"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LifeCircleReq  = worker.LifeCircleReq
	LifeCircleResp = worker.LifeCircleResp
	StatusSyncReq  = worker.StatusSyncReq
	StatusSyncResp = worker.StatusSyncResp

	Worker interface {
		LifeCircle(ctx context.Context, opts ...grpc.CallOption) (worker.Worker_LifeCircleClient, error)
		StatusSync(ctx context.Context, opts ...grpc.CallOption) (worker.Worker_StatusSyncClient, error)
	}

	defaultWorker struct {
		cli zrpc.Client
	}
)

func NewWorker(cli zrpc.Client) Worker {
	return &defaultWorker{
		cli: cli,
	}
}

func (m *defaultWorker) LifeCircle(ctx context.Context, opts ...grpc.CallOption) (worker.Worker_LifeCircleClient, error) {
	client := worker.NewWorkerClient(m.cli.Conn())
	return client.LifeCircle(ctx, opts...)
}

func (m *defaultWorker) StatusSync(ctx context.Context, opts ...grpc.CallOption) (worker.Worker_StatusSyncClient, error) {
	client := worker.NewWorkerClient(m.cli.Conn())
	return client.StatusSync(ctx, opts...)
}
